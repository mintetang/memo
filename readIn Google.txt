To get (read/download) a JSON file from Google Drive using JavaScript, you have a few different options depending on your setup ‚Äî e.g., whether the file is public, whether you‚Äôre using OAuth, or if you‚Äôre doing this client-side or server-side.

Below are the most common approaches:

üîπ Option 1: Public JSON file (simple fetch using file ID)

If your JSON file is publicly shared, you can directly fetch it using its file ID.

Steps

Get your file‚Äôs share link from Google Drive:

https://drive.google.com/file/d/FILE_ID/view?usp=sharing


Here, FILE_ID is the unique identifier for the file.

Use the "uc" or "download" link to access raw file content:

const fileId = "YOUR_FILE_ID";
const url = `https://drive.google.com/uc?export=download&id=${fileId}`;

fetch(url)
  .then(response => response.json())
  .then(data => {
    console.log("JSON data:", data);
  })
  .catch(error => console.error("Error:", error));


‚úÖ This works only if the file is shared publicly (‚ÄúAnyone with the link can view‚Äù).

üîπ Option 2: Using Google Drive API (with OAuth 2.0)

If the file is private, you‚Äôll need to authenticate and use the Google Drive API.

1. Set up a Google Cloud Project

Go to Google Cloud Console

Create a project and enable the Google Drive API

Create OAuth 2.0 credentials for a Web app or service account

2. Include the Google API client
<script src="https://apis.google.com/js/api.js"></script>

3. Authorize and fetch the file
function start() {
  gapi.client.init({
    apiKey: "YOUR_API_KEY",
    clientId: "YOUR_CLIENT_ID",
    scope: "https://www.googleapis.com/auth/drive.readonly",
    discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]
  }).then(() => {
    return gapi.auth2.getAuthInstance().signIn();
  }).then(() => {
    const fileId = "YOUR_FILE_ID";
    return gapi.client.drive.files.get({
      fileId: fileId,
      alt: "media"
    });
  }).then(response => {
    const jsonData = response.result;
    console.log("JSON data:", jsonData);
  }).catch(error => {
    console.error("Error:", error);
  });
}

gapi.load("client:auth2", start);


‚úÖ This works for private files once the user authenticates.

üîπ Option 3: Server-side (Node.js + Service Account)

If you‚Äôre doing this on a backend, use the Google Drive API with a service account:

npm install googleapis

const { google } = require("googleapis");
const fs = require("fs");

const auth = new google.auth.GoogleAuth({
  keyFile: "service-account.json",
  scopes: ["https://www.googleapis.com/auth/drive.readonly"]
});

async function downloadJSON(fileId) {
  const drive = google.drive({ version: "v3", auth });
  const res = await drive.files.get(
    { fileId, alt: "media" },
    { responseType: "stream" }
  );

  let data = "";
  res.data.on("data", chunk => (data += chunk));
  res.data.on("end", () => {
    const json = JSON.parse(data);
    console.log("JSON data:", json);
  });
}

downloadJSON("YOUR_FILE_ID");


‚úÖ This is best for automated or server-side scripts.